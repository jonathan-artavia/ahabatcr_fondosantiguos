@using Fondos_Antiguos.Models
@model CatalogoPaginadoModel<CatalogoModel>

@{
    ViewData["Title"] = "Catalogo";
}
<script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
<link href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/CatalogoVerScript.js"></script>

<div class="table-responsive-sm">
    <nav class="navbar navbar-expand-md navbar-light bg-light">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent" aria-expanded="true">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    @if (FaAuthorizeAttribute.IsAuthorized(User, "Catalogo", "Crear", Context))
                    {
                        @Html.ActionLink(Fondos_Antiguos.Localization.ComunResource.btnAgregarNuevo, "Crear", null, new { @class = "btn btn-outline-dark" })
                    }
                </li>
                <li class="nav-item">
                    @if (FaAuthorizeAttribute.IsAuthorized(User, "Catalogo", "SubirLoteRegistros", Context))
                    {
                        @Html.ActionLink(Fondos_Antiguos.Localization.CatalogoRes.btnImportar, "SubirLoteRegistros", null, new { @class = "btn btn-outline-dark" })
                    }
                </li>
                <li class="nav-item dropdown">
                    @Html.HiddenFor(modelItem => modelItem.OrigenIncluido)
                    <a class="btn btn-outline-dark dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Origen:
                        @{
                            if (Context.Request.QueryString.AllKeys.Contains("incluirHist") && Context.Request.QueryString["incluirHist"] != null && Context.Request.QueryString["incluirHist"] != "")
                            {
                                @ViewUtil.ObtenerDescrOrigen(Convert.ToByte(Context.Request.QueryString["incluirHist"]))
                            }
                            else
                            {
                                @ViewUtil.ObtenerDescrOrigen(0);
                            }
                        }
                    </a>

                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#" onclick="OrigenSeleccionado(0)">@ViewUtil.ObtenerDescrOrigen(0)</a>
                        <a class="dropdown-item" href="#" onclick="OrigenSeleccionado(2)">@ViewUtil.ObtenerDescrOrigen(2)</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="OrigenSeleccionado(1)">@ViewUtil.ObtenerDescrOrigen(1)</a>
                    </div>
                </li>
            </ul>
            <hr />
            <a class="btn btn-secondary dropdown-toggle" data-toggle="collapse" href="#panelFiltros" role="button" aria-expanded="false" aria-pressed="false" autocomplete="off" aria-controls="panelFiltros">
                Filtros
            </a>
        </div>
    </nav>
    <div class="collapse" id="panelFiltros">
        <div class="container">

            <div class="card-header row">
                Filtros
            </div>
            <!-- Empieza Bodies de la Card principal (uno por cada tipo de filtro-->
            <div class="panel panel-default">
                <div class="panel-collapse in container" role="tabpanel">
                    <div class="row">
                        @* Fechas *@
                        <div class="list-group-item col-sm-6">
                            <ul class="list-group list-group-flush" style="padding-bottom: 2px">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Fecha</h6>
                                    @Html.DropDownListFor(modelItem => modelItem.OperacionFecha, Enum.GetValues(typeof(OperacionEnum)).OfType<OperacionEnum>().Select(op => new SelectListItem() { Text = ViewUtil.ObtenerDescrOperacion((byte)op), Value = ((byte)op).ToString() }), "", new { @class = "form-control col-xl-6", onchange = "OperacionFechaSeleccionado()" })
                                    @{
                                        if (Model != null && Model.OperacionFecha.HasValue)
                                        {
                                            if (Model.OperacionFecha == 32 || Model.OperacionFecha == 64)
                                            {
                                                <div id="divFechaFiltro" style="margin-top: 15px">
                                                    <div id="divFechaDesde">
                                                        <label id="lblFechaDesde" class="control-label">Desde</label>
                                                        @Html.EditorFor(item => Model.FechaInicial, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                    </div>
                                                    <div id="divFechaHasta">
                                                        <label class="control-label">Hasta</label>
                                                        @Html.EditorFor(item => item.FechaFinal, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div id="divFechaFiltro" style="margin-top: 15px">
                                                    <div id="divFechaDesde">
                                                        <label id="lblFechaDesde" class="control-label" style="display:none">Desde</label>
                                                        @Html.EditorFor(item => Model.FechaInicial, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                    </div>
                                                    <div id="divFechaHasta" style="display:none">
                                                        <label class="control-label">Hasta</label>
                                                        @Html.EditorFor(item => Model.FechaFinal, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div id="divFechaFiltro" style="display:none; margin-top: 15px">
                                                <div id="divFechaDesde">
                                                    <label id="lblFechaDesde" class="control-label" style="display:none">Desde</label>
                                                    @Html.EditorFor(item => Model.FechaInicial, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                </div>
                                                <div id="divFechaHasta" style="display:none">
                                                    <label class="control-label">Hasta</label>
                                                    @Html.EditorFor(item => Model.FechaFinal, new
                                               {
                                                   @htmlAttributes = new { @class = "form-control col-12" }
                                               })
                                                </div>
                                            </div>
                                        }
                                    }
                                </li>
                            </ul>
                        </div>

                        @* Series *@
                        <div class="list-group-item col-sm-6">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Serie</h6>
                                    @Html.DropDownListFor(modelItem => modelItem.OperacionSerie, (new OperacionEnum[] { OperacionEnum.DiferenteA, OperacionEnum.IgualA }).Select(op => new SelectListItem() { Text = ViewUtil.ObtenerDescrOperacion((byte)op, 1), Value = ((byte)op).ToString() }), "", new { @class = "form-control col-xl-6", onchange = "OperacionSerieSeleccionado()" })
                                    @{
                                        if (Model != null && Model.OperacionSerie.HasValue)
                                        {
                                            <div id="divSerieFiltro" style="margin-top: 15px">
                                                <div id="divSerieDesde">
                                                    @{
                                                        IEnumerable<Fondos_Antiguos.Models.SerieModel> list = ViewBag.SerieList;
                                                        var r = list.Select(x =>
                                                        {
                                                            return new SelectListItem()
                                                            {
                                                                Text = x.Nombre,
                                                                Value = x.ID.ToString(),
                                                                Selected = Model.FiltroSerie.Equals(x.ID)
                                                            };
                                                        });
                                                        @Html.DropDownList("IdSerieDropDown", r, "", new { @class = "form-control col-12" });
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="divSerieFiltro" style="display:none; margin-top: 15px">
                                                <div id="divSerieDesde">
                                                    @{
                                                        IEnumerable<Fondos_Antiguos.Models.SerieModel> list = ViewBag.SerieList;
                                                        var r = list.Select(x =>
                                                        {
                                                            return new SelectListItem()
                                                            {
                                                                Text = x.Nombre,
                                                                Value = x.ID.ToString()
                                                            };
                                                        });
                                                        @Html.DropDownList("IdSerieDropDown", r, "", new { @class = "form-control col-12" });
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                </li>
                            </ul>
                        </div>
                    </div>

                    <div class="row">
                        @* Cajas *@
                        <div class="list-group-item col-sm-4">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Caja</h6>
                                    @Html.DropDownListFor(modelItem => modelItem.OperacionCaja, (new OperacionEnum[] { OperacionEnum.DiferenteA, OperacionEnum.IgualA, OperacionEnum.EntreExc, OperacionEnum.EntreInc }).Select(op => new SelectListItem() { Text = ViewUtil.ObtenerDescrOperacion((byte)op, 1), Value = ((byte)op).ToString() }), "", new { @class = "form-control col-12", onchange = "OperacionCajaSeleccionado()" })
                                    @{
                                        if (Model != null && Model.OperacionCaja.HasValue)
                                        {
                                            <div id="divCajaFiltro" style="margin-top: 15px">

                                                @Html.EditorFor(item => Model.FiltroCaja, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="divCajaFiltro" style="display:none; margin-top: 15px">

                                                @Html.EditorFor(item => Model.FiltroCaja, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                    }
                                </li>
                            </ul>
                        </div>

                        @* Materia *@
                        <div class="list-group-item col-sm-4">
                            <ul class="list-group list-group-flush" style="padding-bottom: 2px">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Materia</h6>
                                    @Html.DropDownListFor(modelItem => modelItem.OperacionMateria, (new OperacionEnum[] { OperacionEnum.DiferenteA, OperacionEnum.IgualA, OperacionEnum.EntreExc, OperacionEnum.EntreInc }).Select(op => new SelectListItem() { Text = ViewUtil.ObtenerDescrOperacion((byte)op, 1), Value = ((byte)op).ToString() }), "", new { @class = "form-control col-12", onchange = "OperacionMateriaSeleccionado()" })
                                    @{
                                        if (Model != null && Model.OperacionMateria.HasValue)
                                        {
                                            <div id="divMateriaFiltro" style="margin-top: 15px">
                                                @Html.EditorFor(item => Model.FiltroMateria, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="divMateriaFiltro" style="display: none; margin-top: 15px">
                                                @Html.EditorFor(item => Model.FiltroMateria, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                    }
                                </li>
                            </ul>
                        </div>

                        @* Lugar *@
                        <div class="list-group-item col-sm-4">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Lugar</h6>
                                    @Html.DropDownListFor(modelItem => modelItem.OperacionLugar, (new OperacionEnum[] { OperacionEnum.DiferenteA, OperacionEnum.IgualA, OperacionEnum.EntreExc, OperacionEnum.EntreInc }).Select(op => new SelectListItem() { Text = ViewUtil.ObtenerDescrOperacion((byte)op, 1), Value = ((byte)op).ToString() }), "", new { @class = "form-control col-12", onchange = "OperacionLugarSeleccionado()" })
                                    @{
                                        if (Model != null && Model.OperacionLugar.HasValue)
                                        {
                                            <div id="divLugarFiltro" style="margin-top: 15px">

                                                @Html.EditorFor(item => Model.FiltroLugar, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="divLugarFiltro" style="display:none; margin-top: 15px">
                                                @Html.EditorFor(item => Model.FiltroLugar, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                                <small class="label label-info"><label>* Este campo de busqueda acepta "|" como separador de varias cajas.</label></small>
                                            </div>
                                        }
                                    }
                                </li>
                            </ul>
                        </div>
                    </div>

                    <div class="row">
                        @* Texto Plano *@
                        <div class="list-group-item col-sm-12">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <h6 class="card-title text-muted">Busqueda</h6>
                                    @{
                                        <div id="divCajaFiltro" style="margin-top: 15px">
                                            @Html.EditorFor(item => Model.TextoPlano, new { @htmlAttributes = new { @class = "form-control col-12" } })
                                        </div>
                                    }
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Footer de Card principal-->
            <div id="divFiltrosFooter" class="card-footer row">
                <button role="button" class="btn btn-primary" onclick="AplicarFiltro()">Aplicar Filtro</button>
                <button role="button" class="btn btn-secondary" onclick="LimpiarFiltro()">Limpiar</button>
            </div>
        </div>
    </div>

    @{
        if (Model.MessageType.HasValue)
        {
            if (Model.MessageType == 0 && !string.IsNullOrEmpty(Model.Message))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong>Completado!</strong> @Model.Message
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
            else if (Model.MessageType == 1 && !string.IsNullOrEmpty(Model.Exception))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>¡Hubo un Problema!</strong> @Model.Exception
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
        }

    }
    <table id="tblCatalogo" class="table table-striped">
        <thead>
            <tr>
                <th>
                    @Fondos_Antiguos.Localization.CatalogoRes.Contenido
                </th>
                <th class="d-none d-lg-table-cell">
                    @Fondos_Antiguos.Localization.CatalogoRes.Lugar
                </th>
                <th class="d-none d-md-table-cell">
                    @Fondos_Antiguos.Localization.CatalogoRes.Año
                </th>
                <th class="d-none d-md-table-cell">
                    @Fondos_Antiguos.Localization.CatalogoRes.Mes
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                bool authEliminar = FaAuthorizeAttribute.IsAuthorized(User, "Catalogo", "Eliminar", Context);
                bool authEditar = FaAuthorizeAttribute.IsAuthorized(User, "Catalogo", "Editar", Context);
                foreach (var item in Model)
                {
                    <tr>
                        <td class="d-none d-sm-table-cell">
                            @Html.DisplayFor(modelItem => item.Contenido)
                        </td>
                        <td class="d-none d-lg-table-cell">
                            @Html.DisplayFor(modelItem => item.Lugar)
                        </td>
                        <td class="d-none d-md-table-cell">
                            @Html.DisplayFor(modelItem => item.Año)
                        </td>
                        <td class="d-none d-md-table-cell">
                            @Html.DisplayFor(modelItem => item.Mes)
                        </td>
                        <td>
                            @Html.HiddenFor(modelItem => item.ID)
                            @Html.HiddenFor(modelItem => item.Origen)
                            <div class="row">
                                @Html.ActionLink(Fondos_Antiguos.Localization.ComunResource.btnVer, "Ver", new { id = item.ID, origen = item.Origen }, new { @class = "btn btn-outline-secondary col", style = "margin-right: 5px" })

                                @if (authEditar)
                                {
                                    @Html.ActionLink(Fondos_Antiguos.Localization.ComunResource.btnEditar, "Editar", new { id = item.ID, origen = item.Origen }, new { @class = "btn btn-outline-secondary col", style = "margin-right: 5px" })
                                }

                                @if (authEliminar)
                                {
                                    <button id="modalActivate" type="button" class="btn btn-outline-secondary col" data-toggle="modal" data-target="#borrarModal" style="vertical-align: middle; margin-right: 5px" onclick="OnBtnBorrarClick(@item.ID, @item.Origen)">
                                        @Fondos_Antiguos.Localization.ComunResource.btnBorrar
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
        <tfoot>
            <tr>
                <td>
                    @Html.ValidationMessageFor(modelItem => Model.Exception)
                </td>
                <td colspan="13" aria-label="Paginación del Catálogo">
                    @Html.HiddenFor(modelItem => modelItem.SelectedPage)
                    <ul class="pagination">
                        @{
                            if (Model.SelectedPage != 1)
                            {
                                <li>
                                    <a id="btnPage" style="width:auto" class="page-link" href="#" onclick="PaginaSeleccionada(1)">
                                        1
                                    </a>
                                </li>
                                if ((Model.SelectedPage - FaViewOptions.CantidadPaginasMostradas) > 1)
                                {
                                    <li><label class="page-link">...</label></li>
                                }
                            }
                            if (Model.PageTotal > 1)
                            {
                                long tr = (Model.SelectedPage > FaViewOptions.CantidadPaginasMostradas ? (FaViewOptions.CantidadPaginasMostradas - 1) + 2 : Model.SelectedPage);
                                for (long i = 2 + (Model.SelectedPage - tr); i < Model.SelectedPage; i++)
                                {
                                    <li>
                                        <a id="btnPage" style="width:auto" class="page-link" href="#" onclick="PaginaSeleccionada(@i)">
                                            @i
                                        </a>
                                    </li>
                                }
                                <li><a id="btnCurrent" class="page-link text-light bg-primary">@Model.SelectedPage</a></li>
                                for (long i = Model.SelectedPage + 1; i < Model.SelectedPage + FaViewOptions.CantidadPaginasMostradas && i < Model.PageTotal; i++)
                                {
                                    <li>
                                        <a id="btnPage" style="width:auto" class="page-link" href="#" onclick="PaginaSeleccionada(@i)">
                                            @i
                                        </a>
                                    </li>
                                }

                                if (Model.SelectedPage != Model.PageTotal)
                                {
                                    if ((Model.SelectedPage) < @Model.PageTotal - FaViewOptions.CantidadPaginasMostradas)
                                    {
                                        <li><label class="page-link">...</label></li>
                                    }
                                    <li>
                                        <a id="btnPage" style="width:auto" class="page-link" href="#" onclick="PaginaSeleccionada(@Model.PageTotal)">
                                            @Model.PageTotal
                                        </a>
                                    </li>
                                }
                            }
                        }
                    </ul>
                    @{
                        long reg_fin = 0;
                        long reg_ini = 0;
                        if (Model.RecordTotal > FaViewOptions.RegistrosPorPagina)
                        {
                            reg_ini = 1 + (FaViewOptions.RegistrosPorPagina * Model.SelectedPage) - Model.PagedResult.Count();
                            reg_fin = Model.PagedResult.Count() < FaViewOptions.RegistrosPorPagina ? (reg_ini + Model.PagedResult.Count() > Model.RecordTotal ? Model.RecordTotal : reg_ini + Model.PagedResult.Count()) : FaViewOptions.RegistrosPorPagina * (Model.SelectedPage); ; //FaViewOptions.RegistrosPorPagina * (Model.SelectedPage);
                        }
                        else
                        {
                            reg_ini = 1;
                            reg_fin = Model.Count();
                        }
                        <laberl>@String.Format("Mostrando {0} a {1} de {2} registros.", reg_ini, reg_fin, Model.RecordTotal)</laberl>
                    }
                </td>
            </tr>
        </tfoot>
    </table>
    @if (FaAuthorizeAttribute.IsAuthorized(User, "Catalogo", "Eliminar", Context))
    {
        <!-- Modal -->
        <div class="modal fade left" id="borrarModal" tabindex="-1" role="dialog" aria-labelledby="modalTitulo" aria-hidden="true">
            <div class="modal-dialog modal-sm modal-side modal-bottom-left" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitulo">¿Esta seguro que desea borrar el registro?</h5>
                    </div>
                    <div class="modal-body">

                    </div>
                    <div class="modal-footer">
                        <form method="GET" action="@Url.Action("Eliminar")">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="BorrarRegistroID" name="id" />
                            <input type="hidden" id="BorrarRegistroOrigen" name="origen" />
                            <input type="submit" class="btn btn-secondary" value="@Fondos_Antiguos.Localization.ComunResource.btnSi" />
                            <button type="button" class="btn btn-primary" data-dismiss="modal">@Fondos_Antiguos.Localization.ComunResource.btnNo</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
</div>